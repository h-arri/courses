{"version":3,"sources":["api/course.service.ts","components/course-card/CourseCard.tsx","store/actions/courses.ts","store/constants.ts","components/courses/Courses.tsx","store/reducers/courses.ts","store/index.ts","store/configureStore.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCourses","a","fetch","headers","then","response","json","useStyles","makeStyles","root","height","width","backgroundColor","color","margin","borderRadius","transition","boxShadow","cursor","content","display","justifyContent","fontWeight","CourseCard","props","course","courseId","courseName","wishListFlag","dispatch","useDispatch","classes","handleClick","type","updateWishFlag","Card","className","CardContent","onClick","displayName","flexDirection","alignItems","title","Courses","courses","useSelector","state","useEffect","data","payload","courseList","catch","error","fetchCoursesFailure","List","map","key","connect","initialState","loading","rootReducer","combineReducers","action","configureStore","createStore","composeWithDevTools","applyMiddleware","reduxThunk","App","store","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.95b220d2.chunk.js","sourcesContent":["const getCourses = async () => {\n  const response = await fetch('courseList.json', {\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  })\n    .then((response) => response.json());\n\n  return response;\n};\n\nexport {getCourses};\n","import React from 'react';\nimport {CourseModel} from '../../api/course.model';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport {useDispatch} from 'react-redux';\nimport {updateWishFlag} from '../../store/actions/courses';\n\nexport type CourseCardProps = {\n  course: CourseModel\n};\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    height: '10vh',\n    width: '70vw',\n    backgroundColor: 'white',\n    color: '#9b5cc4',\n    margin: '1%',\n    borderRadius: '10px',\n    transition: 'all 0.3s cubic-bezier(.25, .8, .25, 1)',\n    boxShadow: '0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24)',\n    cursor: 'pointer',\n\n    '&:hover': {\n      boxShadow: '0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22)'\n    }\n  },\n  content: {\n    display: 'flex',\n    justifyContent: 'space-between',\n\n    '& h4': {\n      fontWeight: 400\n    }\n  }\n}));\n\nconst CourseCard: React.FC<CourseCardProps> = props => {\n  const {course: {courseId, courseName, wishListFlag}} = props;\n  const dispatch = useDispatch();\n\n  const classes = useStyles();\n\n  const handleClick = (): void => {\n    dispatch(updateWishFlag(courseId));\n  }\n\n  return <Card className={classes.root}>\n    <CardContent className={classes.content}>\n      <h4>{courseName}</h4>\n      {wishListFlag ? <FavoriteIcon onClick={handleClick}/> : <FavoriteBorderIcon onClick={handleClick}/>}\n    </CardContent>\n  </Card>\n};\n\nCourseCard.displayName = 'CourseCard';\n\nexport default CourseCard;\n","import {FETCH_COURSES, FETCH_COURSES_FAILURE, FETCH_COURSES_SUCCESS, UPDATE_WISH_FLAG} from '../constants';\nimport {ActionCreator} from 'redux';\nimport {CoursesActions} from '../types';\nimport {ThunkAction} from 'redux-thunk';\nimport {Rootstate} from '../index';\nimport {CourseModel} from '../../api/course.model';\nimport {getCourses} from '../../api/course.service';\n\nconst fetchCourses: ActionCreator<CoursesActions> = () => ({\n  type: FETCH_COURSES\n});\n\nconst fetchCoursesSuccess: ActionCreator<CoursesActions> = (courses: Array<CourseModel>) => ({\n  type: FETCH_COURSES_SUCCESS,\n  payload: courses\n});\n\nconst fetchCoursesFailure: ActionCreator<CoursesActions> = (error: Error) => ({\n  type: FETCH_COURSES_FAILURE,\n  error\n});\n\nconst initStore: ActionCreator<ThunkAction<void, Rootstate, unknown, CoursesActions>> = () => {\n  return dispatch => {\n    dispatch(fetchCourses());\n    getCourses()\n      .then(data => dispatch(fetchCoursesSuccess(data.courseList)))\n      .catch(error => dispatch(fetchCoursesFailure(error)));\n  }\n}\n\nconst updateWishFlag: ActionCreator<CoursesActions> = (courseId: number) => ({\n  type: UPDATE_WISH_FLAG,\n  courseId\n});\n\nexport {initStore, fetchCourses, fetchCoursesSuccess, fetchCoursesFailure, updateWishFlag};\n","export const FETCH_COURSES = 'FETCH_COURSES';\nexport const FETCH_COURSES_SUCCESS = 'FETCH_COURSES_SUCCESS';\nexport const FETCH_COURSES_FAILURE = 'FETCH_COURSES_FAILURE';\n\nexport const UPDATE_WISH_FLAG = 'UPDATE_WISH_FLAG';\n","import React, {useEffect} from 'react';\nimport {connect, useDispatch, useSelector} from 'react-redux';\nimport {CourseModel} from '../../api/course.model';\nimport {Rootstate} from '../../store';\nimport {initStore} from '../../store/actions/courses';\nimport List from '@material-ui/core/List';\nimport CourseCard from '../course-card/CourseCard';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  title: {\n    fontWeight: 400,\n  }\n}));\n\nconst Courses: React.FC = () => {\n  const dispatch = useDispatch();\n  const courses: Array<CourseModel> = useSelector((state: Rootstate) => state.courses.courses);\n\n  const classes = useStyles();\n\n  useEffect(() => {\n    dispatch(initStore());\n  }, []);\n\n  return (<><h2 className={classes.title}>Meine Kurse</h2>\n    <List className={classes.root}>\n      {courses.map(course => <CourseCard key={course.courseId} course={course}/>)}\n    </List>\n  </>);\n};\n\nCourses.displayName = 'Courses';\n\nexport default connect()(Courses);\n","import {CoursesActions, CoursesState} from '../types';\nimport {FETCH_COURSES, FETCH_COURSES_FAILURE, FETCH_COURSES_SUCCESS, UPDATE_WISH_FLAG} from '../constants';\nimport {CourseModel} from '../../api/course.model';\n\nconst initialState: CoursesState = {\n  courses: [],\n  loading: false,\n  error: null\n};\n\nexport const CoursesReducer = (state: CoursesState = initialState, action: CoursesActions): CoursesState => {\n  switch (action.type) {\n    case FETCH_COURSES:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case FETCH_COURSES_SUCCESS:\n      return {\n        ...state,\n        courses: action.payload,\n        loading: false\n      };\n    case FETCH_COURSES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case UPDATE_WISH_FLAG:\n      return {\n        ...state,\n        courses: [...state.courses.map((course: CourseModel) => {\n          if (course.courseId === action.courseId) {\n            return {\n              ...course,\n              wishListFlag: !course.wishListFlag\n            }\n          }\n          return course;\n        })]\n      };\n    default:\n      return state;\n  }\n};\n","import {combineReducers} from 'redux';\nimport {CoursesReducer} from './reducers/courses';\n\nexport const rootReducer = combineReducers({\n  courses: CoursesReducer\n});\n\nexport type Rootstate = ReturnType<typeof rootReducer>;\n","import {rootReducer, Rootstate} from './index';\nimport {applyMiddleware, createStore, Store} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\nconst configureStore: Store<Rootstate> = createStore(rootReducer, composeWithDevTools(applyMiddleware(reduxThunk)));\n\nexport default configureStore;\n","import React from 'react';\nimport './App.css';\nimport Courses from './components/courses/Courses';\nimport {Provider} from 'react-redux';\nimport store from './store/configureStore';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <div className='app'>\n        <header className='app-header'>\n          <h1>Horses</h1>\n        </header>\n        <Courses/>\n      </div>\n    </Provider>\n  );\n}\n\nApp.displayName = 'App';\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}